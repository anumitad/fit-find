import os
import sqlite3
import oracledb

from fastapi import APIRouter
from pydantic import BaseModel
from dotenv import load_dotenv
from datetime import date
from typing import Dict, Any, List, Optional

router = APIRouter(prefix="/log", tags=["log"])

load_dotenv()

USE_ORACLE = os.getenv("USE_ORACLE", "false").lower() == "true"

if USE_ORACLE:
    #oracledb.init_oracle_client(config_dir=os.getenv("ORACLE_WALLET_PATH"))
    #oracledb.init_oracle_client()


    conn = oracledb.connect(
    user="admin",
    password=os.getenv("ORACLE_DB_PASSWORD"),
    dsn=os.getenv("ORACLE_DB_DSN"), 
    config_dir=os.getenv("ORACLE_WALLET_PATH")
    )

else:
    conn = sqlite3.connect("fitness.db", check_same_thread=False)

cursor = conn.cursor()


class BodyMetrics(BaseModel):
    date: date
    weight: Optional[float]
    body_fat: Optional[float]
    muscle_mass: Optional[float]

class WorkoutSet(BaseModel):
    reps: int
    weight: Optional[float] = None

class WorkoutEntry(BaseModel):
    date: date
    exercise: str
    sets: List[WorkoutSet]

class NutritionLog(BaseModel):
    date: date
    food: str
    calories: Optional[int]

if not USE_ORACLE:
    cursor.executescript("""
    CREATE TABLE IF NOT EXISTS body_metrics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date_column TEXT NOT NULL,
        weight REAL,
        body_fat REAL,
        muscle_mass REAL
    );

    CREATE TABLE IF NOT EXISTS workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date_column TEXT NOT NULL,
        exercise TEXT NOT NULL
    );

    CREATE TABLE IF NOT EXISTS workout_sets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        workout_id INTEGER,
        set_number INTEGER,
        reps INTEGER,
        weight REAL,
        FOREIGN KEY (workout_id) REFERENCES workouts(id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS nutrition_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date_column TEXT NOT NULL,
        food TEXT NOT NULL,
        calories INTEGER
    );
    """)
else:
    tables = [
        """
        BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE body_metrics (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                date_column DATE NOT NULL,
                weight NUMBER,
                body_fat NUMBER,
                muscle_mass NUMBER
            )
        ';
        EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -955 THEN -- ORA-00955: name is already used by an existing object
                RAISE;
            END IF;
        END;
        """,

        """
        BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE workouts (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                date_column DATE NOT NULL,
                exercise VARCHAR2(255) NOT NULL
            )
        ';
        EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -955 THEN
                RAISE;
            END IF;
        END;
        """,

        """
        BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE workout_sets (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                workout_id NUMBER,
                set_number NUMBER,
                reps NUMBER,
                weight NUMBER,
                CONSTRAINT fk_workout
                    FOREIGN KEY (workout_id) REFERENCES workouts(id) ON DELETE CASCADE
            )
        ';
        EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -955 THEN
                RAISE;
            END IF;
        END;
        """,

        """
        BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE nutrition_logs (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                date_column DATE NOT NULL,
                food VARCHAR2(255) NOT NULL,
                calories NUMBER
            )
        ';
        EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -955 THEN
                RAISE;
            END IF;
        END;
        """
    ]

    for table_sql in tables:
        cursor.execute(table_sql)

    sequence_statements = [
        "CREATE SEQUENCE body_metrics_seq START WITH 1 INCREMENT BY 1 NOCACHE",
        "CREATE SEQUENCE workouts_seq START WITH 1 INCREMENT BY 1 NOCACHE",
        "CREATE SEQUENCE workout_sets_seq START WITH 1 INCREMENT BY 1 NOCACHE",
        "CREATE SEQUENCE nutrition_logs_seq START WITH 1 INCREMENT BY 1 NOCACHE"
    ]

    for stmt in sequence_statements:
        try:
            cursor.execute(stmt)
            print(f"Executed: {stmt}")
        except oracledb.Error as e:
            # Optional: ignore error if sequence already exists
            error_obj, = e.args
            if "ORA-00955" in error_obj.message:
                print(f"Sequence already exists: {stmt}")
            else:
                raise

     
conn.commit()

@router.post("/body-metrics")
async def add_body_metrics(metrics: BodyMetrics):
    if not USE_ORACLE:
        cursor.execute(
            "INSERT INTO body_metrics (date_column, weight, body_fat, muscle_mass) VALUES (?, ?, ?, ?)",
            (metrics.date.isoformat(), metrics.weight, metrics.body_fat, metrics.muscle_mass)
        )
    
    else: 
        cursor.execute(
            """
            INSERT INTO body_metrics (id, date_column, weight, body_fat, muscle_mass)
            VALUES (body_metrics_seq.NEXTVAL, :date_column, :weight, :body_fat, :muscle_mass)
            """,
            {
                "date_column": metrics.date,
                "weight": metrics.weight,
                "body_fat": metrics.body_fat,
                "muscle_mass": metrics.muscle_mass
            }
        )

    conn.commit()
    return {"status": "success", "message": "Body metrics saved."}


@router.post("/workouts")
async def add_workout(entry: WorkoutEntry):
    if not USE_ORACLE:
        cursor.execute(
            "INSERT INTO workouts (date_column, exercise) VALUES (?, ?)",
            (entry.date.isoformat(), entry.exercise)
        )
        workout_id = cursor.lastrowid

        for i, s in enumerate(entry.sets, start=1):
                cursor.execute(
                    "INSERT INTO workout_sets (workout_id, set_number, reps, weight) VALUES (?, ?, ?, ?)",
                    (workout_id, i, s.reps, s.weight)
                )  
    else: 
        cursor.execute(
            "INSERT INTO workouts (id, date_column, exercise) VALUES (workouts_seq.NEXTVAL, :date_column, :exercise)",
            {"date_column": entry.date, "exercise": entry.exercise}
        )
        # Get the generated ID of the inserted workout
        cursor.execute("SELECT workouts_seq.CURRVAL FROM dual")
        workout_id = cursor.fetchone()[0]

        for i, s in enumerate(entry.sets, start=1):
            cursor.execute(
                """
                INSERT INTO workout_sets (id, workout_id, set_number, reps, weight)
                VALUES (workout_sets_seq.NEXTVAL, :workout_id, :set_number, :reps, :weight)
                """,
                {
                    "workout_id": workout_id,
                    "set_number": i,
                    "reps": s.reps,
                    "weight": s.weight
                }
            )   

    conn.commit()
    return {"status": "success", "message": "Workout saved."}


@router.post("/nutrition")
async def add_nutrition_log(log: NutritionLog):
    if not USE_ORACLE:
        cursor.execute(
            "INSERT INTO nutrition_logs (date_column, food, calories) VALUES (?, ?, ?)",
            (log.date.isoformat(), log.food, log.calories)
        )

    else:
        cursor.execute(
            "INSERT INTO nutrition_logs (id, date_column, food, calories) VALUES (nutrition_logs_seq.NEXTVAL, :date_column, :food, :calories)",
            {"date_column": log.date, "food": log.food, "calories": log.calories}
        )

    conn.commit()
    return {"status": "success", "message": "Nutrition log saved."}

conn.close()